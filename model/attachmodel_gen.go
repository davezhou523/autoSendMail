// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	attachFieldNames          = builder.RawFieldNames(&Attach{})
	attachRows                = strings.Join(attachFieldNames, ",")
	attachRowsExpectAutoSet   = strings.Join(stringx.Remove(attachFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	attachRowsWithPlaceHolder = strings.Join(stringx.Remove(attachFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	attachModel interface {
		Insert(ctx context.Context, data *Attach) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*Attach, error)
		Update(ctx context.Context, data *Attach) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultAttachModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Attach struct {
		Id         uint64        `db:"id"`
		FileName   string        `db:"file_name"`   // 文件名
		FilePath   string        `db:"file_path"`   // 文件路径
		Type       sql.NullInt64 `db:"type"`        // 类型:1：邮件内容
		CreateTime sql.NullTime  `db:"create_time"` // 创建时间
		UpdateTime sql.NullTime  `db:"update_time"` // 更新时间
	}
)

func newAttachModel(conn sqlx.SqlConn) *defaultAttachModel {
	return &defaultAttachModel{
		conn:  conn,
		table: "`attach`",
	}
}

func (m *defaultAttachModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultAttachModel) FindOne(ctx context.Context, id uint64) (*Attach, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", attachRows, m.table)
	var resp Attach
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAttachModel) Insert(ctx context.Context, data *Attach) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, attachRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.FileName, data.FilePath, data.Type)
	return ret, err
}

func (m *defaultAttachModel) Update(ctx context.Context, data *Attach) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, attachRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.FileName, data.FilePath, data.Type, data.Id)
	return err
}

func (m *defaultAttachModel) tableName() string {
	return m.table
}
