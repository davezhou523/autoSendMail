// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.6

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	googleLrFieldNames          = builder.RawFieldNames(&GoogleLr{})
	googleLrRows                = strings.Join(googleLrFieldNames, ",")
	googleLrRowsExpectAutoSet   = strings.Join(stringx.Remove(googleLrFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	googleLrRowsWithPlaceHolder = strings.Join(stringx.Remove(googleLrFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	googleLrModel interface {
		Insert(ctx context.Context, data *GoogleLr) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*GoogleLr, error)
		Update(ctx context.Context, data *GoogleLr) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultGoogleLrModel struct {
		conn  sqlx.SqlConn
		table string
	}

	GoogleLr struct {
		Id   uint64         `db:"id"`
		Code sql.NullString `db:"code"` // 语言简写
		Name sql.NullString `db:"name"` // 语言名称
		Sta  int64          `db:"sta"`  // 状态,1:启用，2：停用
	}
)

func newGoogleLrModel(conn sqlx.SqlConn) *defaultGoogleLrModel {
	return &defaultGoogleLrModel{
		conn:  conn,
		table: "`google_lr`",
	}
}

func (m *defaultGoogleLrModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultGoogleLrModel) FindOne(ctx context.Context, id uint64) (*GoogleLr, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", googleLrRows, m.table)
	var resp GoogleLr
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGoogleLrModel) Insert(ctx context.Context, data *GoogleLr) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, googleLrRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Code, data.Name, data.Sta)
	return ret, err
}

func (m *defaultGoogleLrModel) Update(ctx context.Context, data *GoogleLr) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, googleLrRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Code, data.Name, data.Sta, data.Id)
	return err
}

func (m *defaultGoogleLrModel) tableName() string {
	return m.table
}
