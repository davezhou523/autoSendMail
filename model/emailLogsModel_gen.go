// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.6

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	emailLogsFieldNames          = builder.RawFieldNames(&EmailLogs{})
	emailLogsRows                = strings.Join(emailLogsFieldNames, ",")
	emailLogsRowsExpectAutoSet   = strings.Join(stringx.Remove(emailLogsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	emailLogsRowsWithPlaceHolder = strings.Join(stringx.Remove(emailLogsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	emailLogsModel interface {
		Insert(ctx context.Context, data *EmailLogs) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*EmailLogs, error)
		Update(ctx context.Context, data *EmailLogs) error
		Delete(ctx context.Context, id int64) error
	}

	defaultEmailLogsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	EmailLogs struct {
		Id         int64     `db:"id"`          // 邮件记录 ID
		ProviderId int64     `db:"provider_id"` // 邮件服务商 ID
		UserId     int64     `db:"user_id"`     // 用户 ID
		CompanyId  int64     `db:"company_id"`  // 客户公司 ID
		Recipient  string    `db:"recipient"`   // 收件人邮箱
		Subject    string    `db:"subject"`     // 邮件主题
		Status     string    `db:"status"`      // 发送状态
		SentAt     time.Time `db:"sent_at"`     // 发送时间
	}
)

func newEmailLogsModel(conn sqlx.SqlConn) *defaultEmailLogsModel {
	return &defaultEmailLogsModel{
		conn:  conn,
		table: "`email_logs`",
	}
}

func (m *defaultEmailLogsModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultEmailLogsModel) FindOne(ctx context.Context, id int64) (*EmailLogs, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", emailLogsRows, m.table)
	var resp EmailLogs
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultEmailLogsModel) Insert(ctx context.Context, data *EmailLogs) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, emailLogsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.ProviderId, data.UserId, data.CompanyId, data.Recipient, data.Subject, data.Status, data.SentAt)
	return ret, err
}

func (m *defaultEmailLogsModel) Update(ctx context.Context, data *EmailLogs) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, emailLogsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.ProviderId, data.UserId, data.CompanyId, data.Recipient, data.Subject, data.Status, data.SentAt, data.Id)
	return err
}

func (m *defaultEmailLogsModel) tableName() string {
	return m.table
}
