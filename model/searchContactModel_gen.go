// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	searchContactFieldNames          = builder.RawFieldNames(&SearchContact{})
	searchContactRows                = strings.Join(searchContactFieldNames, ",")
	searchContactRowsExpectAutoSet   = strings.Join(stringx.Remove(searchContactFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	searchContactRowsWithPlaceHolder = strings.Join(stringx.Remove(searchContactFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	searchContactModel interface {
		Insert(ctx context.Context, data *SearchContact) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*SearchContact, error)
		Update(ctx context.Context, data *SearchContact) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultSearchContactModel struct {
		conn  sqlx.SqlConn
		table string
	}

	SearchContact struct {
		Id         uint64         `db:"id"`
		IsSend     uint64         `db:"is_send"`   // 是否发送邮件,1:发送，2：不发送
		IsReturn   uint64         `db:"is_return"`   // 系统退回0:未退回,1:退回
		Email      string         `db:"email"`       // 邮件地址
		Phone      sql.NullString `db:"phone"`       // 电话
		Category   uint64            `db:"category"`    // 分类,1:手动,2:google
		Keyword    string         `db:"keyword"`     // 关键词
		Url        string         `db:"url"`         // url
		Md5        string         `db:"md5"`         // 验证urll唯一
		CreateTime sql.NullTime   `db:"create_time"` // 创建时间
		UpdateTime sql.NullTime   `db:"update_time"` // 更新时间
	}
)

func newSearchContactModel(conn sqlx.SqlConn) *defaultSearchContactModel {
	return &defaultSearchContactModel{
		conn:  conn,
		table: "`search_contact`",
	}
}

func (m *defaultSearchContactModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultSearchContactModel) FindOne(ctx context.Context, id uint64) (*SearchContact, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", searchContactRows, m.table)
	var resp SearchContact
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSearchContactModel) Insert(ctx context.Context, data *SearchContact) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?,?, ?, ?, ?, ?, ?)", m.table, searchContactRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.IsSend,data.Email, data.Phone, data.Category, data.Keyword, data.Url, data.Md5)
	return ret, err
}

func (m *defaultSearchContactModel) Update(ctx context.Context, data *SearchContact) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, searchContactRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query,data.IsSend,data.IsReturn, data.Email, data.Phone, data.Category, data.Keyword, data.Url, data.Md5, data.Id)
	return err
}

func (m *defaultSearchContactModel) tableName() string {
	return m.table
}
