// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.6

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	emailProvidersFieldNames          = builder.RawFieldNames(&EmailProviders{})
	emailProvidersRows                = strings.Join(emailProvidersFieldNames, ",")
	emailProvidersRowsExpectAutoSet   = strings.Join(stringx.Remove(emailProvidersFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	emailProvidersRowsWithPlaceHolder = strings.Join(stringx.Remove(emailProvidersFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	emailProvidersModel interface {
		Insert(ctx context.Context, data *EmailProviders) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*EmailProviders, error)
		Update(ctx context.Context, data *EmailProviders) error
		Delete(ctx context.Context, id int64) error
	}

	defaultEmailProvidersModel struct {
		conn  sqlx.SqlConn
		table string
	}

	EmailProviders struct {
		Id                int64          `db:"id"`                  // 主键 ID
		UserId            int64          `db:"user_id"`             // 用户 ID，区分不同用户
		CompanyId         int64          `db:"company_id"`          // 公司 ID，区分不同公司
		Name              string         `db:"name"`                // 邮件服务商名称
		SmtpServer        string         `db:"smtp_server"`         // SMTP 服务器地址
		SmtpPort          int64          `db:"smtp_port"`           // SMTP 端口
		PopServer         string         `db:"pop_server"`          // POP3 服务器地址
		PopPort           int64          `db:"pop_port"`            // POP3 端口
		Username          string         `db:"username"`            // SMTP 认证用户名
		Password          string         `db:"password"`            // SMTP 认证密码
		SmtpTls           int64          `db:"smtp_tls"`            // 是否启用 TLS
		DailyLimit        int64          `db:"daily_limit"`         // 每日邮件发送限额
		SentCount         int64          `db:"sent_count"`          // 当天已发送数量
		ResetTime         time.Time      `db:"reset_time"`          // 发送计数重置时间
		CreatedTime       time.Time      `db:"created_time"`        // 创建时间
		UpdatedTime       time.Time      `db:"updated_time"`        // 更新时间
		OauthClientId     sql.NullString `db:"oauth_client_id"`     // OAuth Client ID
		OauthClientSecret sql.NullString `db:"oauth_client_secret"` // OAuth Client Secret
		OauthAccessToken  sql.NullString `db:"oauth_access_token"`  // OAuth 访问令牌 (Access Token)
		OauthRefreshToken sql.NullString `db:"oauth_refresh_token"` // OAuth 刷新令牌 (Refresh Token)
		OauthTokenExpiry  sql.NullTime   `db:"oauth_token_expiry"`  // OAuth Token 过期时间
	}
)

func newEmailProvidersModel(conn sqlx.SqlConn) *defaultEmailProvidersModel {
	return &defaultEmailProvidersModel{
		conn:  conn,
		table: "`email_providers`",
	}
}

func (m *defaultEmailProvidersModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultEmailProvidersModel) FindOne(ctx context.Context, id int64) (*EmailProviders, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", emailProvidersRows, m.table)
	var resp EmailProviders
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultEmailProvidersModel) Insert(ctx context.Context, data *EmailProviders) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, emailProvidersRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.UserId, data.CompanyId, data.Name, data.SmtpServer, data.SmtpPort, data.PopServer, data.PopPort, data.Username, data.Password, data.SmtpTls, data.DailyLimit, data.SentCount, data.ResetTime, data.CreatedTime, data.UpdatedTime, data.OauthClientId, data.OauthClientSecret, data.OauthAccessToken, data.OauthRefreshToken, data.OauthTokenExpiry)
	return ret, err
}

func (m *defaultEmailProvidersModel) Update(ctx context.Context, data *EmailProviders) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, emailProvidersRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.UserId, data.CompanyId, data.Name, data.SmtpServer, data.SmtpPort, data.PopServer, data.PopPort, data.Username, data.Password, data.SmtpTls, data.DailyLimit, data.SentCount, data.ResetTime, data.CreatedTime, data.UpdatedTime, data.OauthClientId, data.OauthClientSecret, data.OauthAccessToken, data.OauthRefreshToken, data.OauthTokenExpiry, data.Id)
	return err
}

func (m *defaultEmailProvidersModel) tableName() string {
	return m.table
}
