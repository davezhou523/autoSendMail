// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	emailContentFieldNames          = builder.RawFieldNames(&EmailContent{})
	emailContentRows                = strings.Join(emailContentFieldNames, ",")
	emailContentRowsExpectAutoSet   = strings.Join(stringx.Remove(emailContentFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	emailContentRowsWithPlaceHolder = strings.Join(stringx.Remove(emailContentFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	emailContentModel interface {
		Insert(ctx context.Context, data *EmailContent) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*EmailContent, error)
		FindOneBySort(ctx context.Context, sort uint64) (*EmailContent, error)
		Update(ctx context.Context, data *EmailContent) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultEmailContentModel struct {
		conn  sqlx.SqlConn
		table string
	}

	EmailContent struct {
		Id         uint64         `db:"id"`
		Title      string         `db:"title"`       // 邮件标题
		Content    string `db:"content"`     // 邮件内容
		AttachId    string  `db:"attach_id"`   // 附件id
		Sort       uint64         `db:"sort"`        // 发送邮件顺序
		CreateTime sql.NullTime   `db:"create_time"` // 创建时间
		UpdateTime sql.NullTime   `db:"update_time"` // 更新时间
	}
)

func newEmailContentModel(conn sqlx.SqlConn) *defaultEmailContentModel {
	return &defaultEmailContentModel{
		conn:  conn,
		table: "`email_content`",
	}
}

func (m *defaultEmailContentModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultEmailContentModel) FindOne(ctx context.Context, id uint64) (*EmailContent, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", emailContentRows, m.table)
	var resp EmailContent
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultEmailContentModel) FindOneBySort(ctx context.Context, sort uint64) (*EmailContent, error) {
	var resp EmailContent
	query := fmt.Sprintf("select %s from %s where `sort` = ? limit 1", emailContentRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, sort)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultEmailContentModel) Insert(ctx context.Context, data *EmailContent) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, emailContentRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Title, data.Content, data.AttachId, data.Sort)
	return ret, err
}

func (m *defaultEmailContentModel) Update(ctx context.Context, newData *EmailContent) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, emailContentRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Title, newData.Content, newData.AttachId, newData.Sort, newData.Id)
	return err
}

func (m *defaultEmailContentModel) tableName() string {
	return m.table
}
