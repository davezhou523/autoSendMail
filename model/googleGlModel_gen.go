// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.6

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	googleGlFieldNames          = builder.RawFieldNames(&GoogleGl{})
	googleGlRows                = strings.Join(googleGlFieldNames, ",")
	googleGlRowsExpectAutoSet   = strings.Join(stringx.Remove(googleGlFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	googleGlRowsWithPlaceHolder = strings.Join(stringx.Remove(googleGlFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	googleGlModel interface {
		Insert(ctx context.Context, data *GoogleGl) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*GoogleGl, error)
		Update(ctx context.Context, data *GoogleGl) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultGoogleGlModel struct {
		conn  sqlx.SqlConn
		table string
	}

	GoogleGl struct {
		Id   uint64 `db:"id"`
		Code string `db:"code"`
		Name string `db:"name"`
		Sta  int64  `db:"sta"` // 状态,1:启用，2：停用
	}
)

func newGoogleGlModel(conn sqlx.SqlConn) *defaultGoogleGlModel {
	return &defaultGoogleGlModel{
		conn:  conn,
		table: "`google_gl`",
	}
}

func (m *defaultGoogleGlModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultGoogleGlModel) FindOne(ctx context.Context, id uint64) (*GoogleGl, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", googleGlRows, m.table)
	var resp GoogleGl
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGoogleGlModel) Insert(ctx context.Context, data *GoogleGl) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, googleGlRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Code, data.Name, data.Sta)
	return ret, err
}

func (m *defaultGoogleGlModel) Update(ctx context.Context, data *GoogleGl) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, googleGlRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Code, data.Name, data.Sta, data.Id)
	return err
}

func (m *defaultGoogleGlModel) tableName() string {
	return m.table
}
