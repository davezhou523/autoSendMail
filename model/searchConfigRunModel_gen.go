// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.6

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	searchConfigRunFieldNames          = builder.RawFieldNames(&SearchConfigRun{})
	searchConfigRunRows                = strings.Join(searchConfigRunFieldNames, ",")
	searchConfigRunRowsExpectAutoSet   = strings.Join(stringx.Remove(searchConfigRunFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	searchConfigRunRowsWithPlaceHolder = strings.Join(stringx.Remove(searchConfigRunFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	searchConfigRunModel interface {
		Insert(ctx context.Context, data *SearchConfigRun) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*SearchConfigRun, error)
		Update(ctx context.Context, data *SearchConfigRun) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultSearchConfigRunModel struct {
		conn  sqlx.SqlConn
		table string
	}

	SearchConfigRun struct {
		Id         uint64    `db:"id"`
		ConfigId   uint64    `db:"config_id"`
		CreateTime time.Time `db:"create_time"` // 创建时间
	}
)

func newSearchConfigRunModel(conn sqlx.SqlConn) *defaultSearchConfigRunModel {
	return &defaultSearchConfigRunModel{
		conn:  conn,
		table: "`search_config_run`",
	}
}

func (m *defaultSearchConfigRunModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultSearchConfigRunModel) FindOne(ctx context.Context, id uint64) (*SearchConfigRun, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", searchConfigRunRows, m.table)
	var resp SearchConfigRun
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSearchConfigRunModel) Insert(ctx context.Context, data *SearchConfigRun) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?)", m.table, searchConfigRunRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.ConfigId)
	return ret, err
}

func (m *defaultSearchConfigRunModel) Update(ctx context.Context, data *SearchConfigRun) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, searchConfigRunRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.ConfigId, data.Id)
	return err
}

func (m *defaultSearchConfigRunModel) tableName() string {
	return m.table
}
