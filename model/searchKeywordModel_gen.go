// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.6

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	searchKeywordFieldNames          = builder.RawFieldNames(&SearchKeyword{})
	searchKeywordRows                = strings.Join(searchKeywordFieldNames, ",")
	searchKeywordRowsExpectAutoSet   = strings.Join(stringx.Remove(searchKeywordFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	searchKeywordRowsWithPlaceHolder = strings.Join(stringx.Remove(searchKeywordFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	searchKeywordModel interface {
		Insert(ctx context.Context, data *SearchKeyword) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*SearchKeyword, error)
		Update(ctx context.Context, data *SearchKeyword) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultSearchKeywordModel struct {
		conn  sqlx.SqlConn
		table string
	}

	SearchKeyword struct {
		Id         uint64         `db:"id"`
		UserId     uint64         `db:"user_id"`     // 用户id
		Keyword    string         `db:"keyword"`     // 关键词
		CompanyId  int64          `db:"company_id"`  // 用户公司id
		Exclude    sql.NullString `db:"exclude"`     // 排除
		CreateTime time.Time      `db:"create_time"` // 创建时间
		UpdateTime time.Time      `db:"update_time"` // 更新时间
		Sta        int64          `db:"sta"`         // 状态:1启用，2停用
	}
)

func newSearchKeywordModel(conn sqlx.SqlConn) *defaultSearchKeywordModel {
	return &defaultSearchKeywordModel{
		conn:  conn,
		table: "`search_keyword`",
	}
}

func (m *defaultSearchKeywordModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultSearchKeywordModel) FindOne(ctx context.Context, id uint64) (*SearchKeyword, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", searchKeywordRows, m.table)
	var resp SearchKeyword
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSearchKeywordModel) Insert(ctx context.Context, data *SearchKeyword) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, searchKeywordRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.UserId, data.Keyword, data.CompanyId, data.Exclude, data.Sta)
	return ret, err
}

func (m *defaultSearchKeywordModel) Update(ctx context.Context, data *SearchKeyword) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, searchKeywordRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.UserId, data.Keyword, data.CompanyId, data.Exclude, data.Sta, data.Id)
	return err
}

func (m *defaultSearchKeywordModel) tableName() string {
	return m.table
}
